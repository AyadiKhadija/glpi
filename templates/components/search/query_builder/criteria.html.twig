{#
 # ---------------------------------------------------------------------
 #
 # GLPI - Gestionnaire Libre de Parc Informatique
 #
 # http://glpi-project.org
 #
 # @copyright 2015-2022 Teclib' and contributors.
 # @copyright 2003-2014 by the INDEPNET Development Team.
 # @licence   https://www.gnu.org/licenses/gpl-3.0.html
 #
 # ---------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of GLPI.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 # ---------------------------------------------------------------------
 #}

{% set add_padding = from_meta is defined ? 'p-0' : 'p-2' %}
{% set from_meta = from_meta is defined and from_meta %}

<div class="list-group-item {{ add_padding }} border-0 normalcriteria{{ add_class }}" id="{{ rowid }}">
   <div class="row g-1">
      {% if not from_meta %}
         {% if num == 0 and mainform is defined and mainform %}
            {#
            // Instanciate an object to access method
             $item = null;
             if ($request["itemtype"] != \AllAssets::getType()) {
                 $item = getItemForItemtype($request["itemtype"]);
             }
             if ($item && $item->maybeDeleted()) {
                 echo \Html::hidden('is_deleted', [
                     'value' => $p['is_deleted'],
                     'id'    => 'is_deleted'
                 ]);
             }
             echo \Html::hidden('as_map', [
                 'value' => $p['as_map'],
                 'id'    => 'as_map'
             ]);
             echo \Html::hidden('browse', [
                 'value' => $p['browse'],
                 'id'    => 'browse'
             ]);
             echo \Html::hidden('unpublished', [
                 'value' => $p['unpublished'],
                 'id'    => 'unpublished'
             ]);
            #}
         {% endif %}
         <div class="col-auto">
            <button class="btn btn-sm btn-icon btn-ghost-secondary remove-search-criteria" type="button" data-rowid="{{ rowid }}"
                    data-bs-toggle="tooltip" data-bs-placement="left" title="{{ __('Delete a rule') }}">
               <i class="ti ti-square-minus" alt="-"></i>
            </button>
         </div>
      {% endif %}

      {% if not from_meta %}
         {#
         echo "<div class='col-auto'>";
         if (isset($criteria["link"])) {
             $value = $criteria["link"];
         }
         $operators = SearchEngine::getLogicalOperators(($num == 0));
         \Dropdown::showFromArray("criteria{$prefix}[$num][link]", $operators, [
             'value' => $value,
         ]);
         echo "</div>";
         #}
      {% endif %}

      {#
      echo "<div class='col-auto'>";
        $rand = \Dropdown::showFromArray("criteria{$prefix}[$num][field]", $values, [
            'value' => $value,
        ]);
        echo "</div>";
        $field_id = \Html::cleanId("dropdown_criteria{$prefix}[$num][field]$rand");
        $spanid   = \Html::cleanId('SearchSpan' . $normalized_itemtype . $prefix . $num);

        echo "<div class='col-auto'>";
        echo "<div class='row g-1' id='$spanid'>";

        $used_itemtype = $request["itemtype"];
        // Force Computer itemtype for AllAssets to permit to show specific items
        if ($request["itemtype"] == \AllAssets::getType()) {
            $used_itemtype = 'Computer';
        }

        $searchtype = isset($criteria['searchtype'])
            ? $criteria['searchtype']
            : "";
        $p_value    = isset($criteria['value'])
            ? Sanitizer::dbUnescape($criteria['value'])
            : "";

        $params = [
            'itemtype'    => $used_itemtype,
            '_idor_token' => \Session::getNewIDORToken($used_itemtype),
            'field'       => $value,
            'searchtype'  => $searchtype,
            'value'       => $p_value,
            'num'         => $num,
            'p'           => $p,
        ];
        self::displaySearchoption($params);
        echo "</div>";

        \Ajax::updateItemOnSelectEvent(
            $field_id,
            $spanid,
            $CFG_GLPI["root_doc"] . "/ajax/search.php",
            [
                'action'     => 'display_searchoption',
                'field'      => '__VALUE__',
            ] + $params
        );
        echo "</div>"; //.row
        echo "</div>"; //#$spanid
        echo "</div>";
      #}
   </div>
</div>
